// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package productsrvpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ProductSrvClient is the client API for ProductSrv service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProductSrvClient interface {
	GetAll(ctx context.Context, in *GetAllRequest, opts ...grpc.CallOption) (*GetAllReponse, error)
	GetById(ctx context.Context, in *GetByIdRequest, opts ...grpc.CallOption) (*GetByIdResponse, error)
}

type productSrvClient struct {
	cc grpc.ClientConnInterface
}

func NewProductSrvClient(cc grpc.ClientConnInterface) ProductSrvClient {
	return &productSrvClient{cc}
}

func (c *productSrvClient) GetAll(ctx context.Context, in *GetAllRequest, opts ...grpc.CallOption) (*GetAllReponse, error) {
	out := new(GetAllReponse)
	err := c.cc.Invoke(ctx, "/productsrv.ProductSrv/GetAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productSrvClient) GetById(ctx context.Context, in *GetByIdRequest, opts ...grpc.CallOption) (*GetByIdResponse, error) {
	out := new(GetByIdResponse)
	err := c.cc.Invoke(ctx, "/productsrv.ProductSrv/GetById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProductSrvServer is the server API for ProductSrv service.
// All implementations must embed UnimplementedProductSrvServer
// for forward compatibility
type ProductSrvServer interface {
	GetAll(context.Context, *GetAllRequest) (*GetAllReponse, error)
	GetById(context.Context, *GetByIdRequest) (*GetByIdResponse, error)
	mustEmbedUnimplementedProductSrvServer()
}

// UnimplementedProductSrvServer must be embedded to have forward compatible implementations.
type UnimplementedProductSrvServer struct {
}

func (UnimplementedProductSrvServer) GetAll(context.Context, *GetAllRequest) (*GetAllReponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedProductSrvServer) GetById(context.Context, *GetByIdRequest) (*GetByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetById not implemented")
}
func (UnimplementedProductSrvServer) mustEmbedUnimplementedProductSrvServer() {}

// UnsafeProductSrvServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProductSrvServer will
// result in compilation errors.
type UnsafeProductSrvServer interface {
	mustEmbedUnimplementedProductSrvServer()
}

func RegisterProductSrvServer(s grpc.ServiceRegistrar, srv ProductSrvServer) {
	s.RegisterService(&ProductSrv_ServiceDesc, srv)
}

func _ProductSrv_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductSrvServer).GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/productsrv.ProductSrv/GetAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductSrvServer).GetAll(ctx, req.(*GetAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductSrv_GetById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductSrvServer).GetById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/productsrv.ProductSrv/GetById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductSrvServer).GetById(ctx, req.(*GetByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProductSrv_ServiceDesc is the grpc.ServiceDesc for ProductSrv service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProductSrv_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "productsrv.ProductSrv",
	HandlerType: (*ProductSrvServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAll",
			Handler:    _ProductSrv_GetAll_Handler,
		},
		{
			MethodName: "GetById",
			Handler:    _ProductSrv_GetById_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "product.proto",
}
